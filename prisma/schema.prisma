datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Role {
  CLIENT
  WORKER
  ADMIN
}

enum BookingStatus {
  PENDING
  ACCEPTED
  COMPLETED
  CANCELLED_BY_CLIENT
  CANCELLED_BY_WORKER
  CANCELLED_BY_ADMIN
  MODIFIED_COMPLETED
  MODIFIED_CANCELLED
}

enum LeaveType {
  SICK_LEAVE
  ANNUAL_LEAVE
  UNPAID_LEAVE
}

enum PaymentStatus {
  SUCCESSFUL
  PENDING
  REFUNDED
}

// Table name convention (@@map):
// 1. snake_case (using lowercase, space is replaced by underscore)
// 2. singular form (user, not users)

// Model name convention:
// 1. camelCase (first word is lowercase, then capital case without space)
// singular form or plural form depends on the object. If multiple objects, then plural

// Can be client, worker, or admin
model User {
  id             String           @id @default(uuid())
  name           String           @db.VarChar(255)
  email          String           @unique @db.VarChar(255)
  phone          String           @db.VarChar(50)
  password       String           @db.VarChar(255)
  role           Role             @default(CLIENT)
  token          String?          @db.VarChar(255)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  userLocations  UserLocation[]
  clientBookings Booking[]        @relation("ClientBookings")
  workerBookings Booking[]        @relation("WorkerBookings")
  bookingHistory BookingHistory[]
  workerHours    WorkerHours[]
  leaves         Leave[]

  @@map("user")
}

// Track worker assignments and their working hours for each booking. 
// This data is crucial for various aspects of cleaning service application, such as:
// Payroll: Calculating worker pay based on the hours they worked on bookings.
// Billing: Determining the total cost of a booking based on worker hours and their associated rates.
// Scheduling: Analyzing worker availability and workload based on existing and upcoming bookings.
// Analytics: Understanding worker performance and identifying trends in booking durations.
model WorkerHours {
  id        String   @id @default(uuid())
  workerId  String   @unique
  bookingId String   @unique
  startTime DateTime
  endTime   DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  worker    User     @relation(fields: [workerId], references: [id])
  booking   Booking  @relation(fields: [bookingId], references: [id])

  @@map("worker_hours")
}

// Provides a historical record of past leave requests for reference and future planning.
// During the leave period, the worker is marked as unavailable for booking assignments.
model Leave {
  id        String    @id @default(uuid())
  workerId  String    @unique
  type      LeaveType
  startDate DateTime
  endDate   DateTime
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  worker    User      @relation(fields: [workerId], references: [id])

  @@map("leave")
}

model Location {
  id             String         @id @default(uuid())
  address        String         @db.Text
  bathroomNumber Int            @db.Integer
  deskNumber     Int            @db.Integer
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  userLocations  UserLocation[]
  booking        Booking?

  @@map("location")
}

// Connector between User and Location
// User and Location have many-to-many relationship
model UserLocation {
  id         String   @id @default(uuid())
  userId     String   @unique
  locationId String   @unique
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  user       User     @relation(fields: [userId], references: [id])
  location   Location @relation(fields: [locationId], references: [id])

  @@unique([userId, locationId])
  @@map("user_location")
}

model Booking {
  id                 String           @id @default(uuid())
  clientId           String           @unique
  workerId           String?          @unique
  serviceId          String           @unique
  locationId         String           @unique
  dateTime           DateTime
  estimatedArrival   DateTime
  originalDateTime   DateTime?
  originalLocationId String?
  price              Decimal
  status             BookingStatus
  rating             Int?             @db.SmallInt
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
  client             User             @relation("ClientBookings", fields: [clientId], references: [id])
  worker             User?            @relation("WorkerBookings", fields: [workerId], references: [id])
  service            Service          @relation(fields: [serviceId], references: [id])
  location           Location         @relation(fields: [locationId], references: [id])
  workerHours        WorkerHours[]
  bookingHistory     BookingHistory[]

  @@map("booking")
}

// Record of booking
model BookingHistory {
  id           String    @id @default(uuid())
  bookingId    String    @unique
  changerId    String?   @unique
  changeReason String?   @db.Text
  changes      Json?
  changedAt    DateTime? @default(now())
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  booking      Booking   @relation(fields: [bookingId], references: [id])
  changer      User?     @relation(fields: [changerId], references: [id])

  @@map("booking_history")
}

// Available service for clients
model Service {
  id          String    @id @default(uuid())
  name        String    @unique @db.VarChar(255)
  description String    @db.Text
  basePrice   Decimal
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  bookings    Booking[]

  @@map("service")
}
