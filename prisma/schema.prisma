datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Role {
  CLIENT
  WORKER
  ADMIN
}

enum BookingStatus {
  PENDING
  ACCEPTED
  COMPLETED
  CANCELLED
  MODIFIED
}

enum LeaveType {
  SICK_LEAVE
  ANNUAL_LEAVE
  UNPAID_LEAVE
}

enum PaymentStatus {
  SUCCESSFUL
  PENDING
  REFUNDED
}

// Table name convention (@@map):
// 1. snake_case (using lowercase, space is replaced by underscore)
// 2. singular form (user, not users)

// Model name convention:
// 1. camelCase (first word is lowercase, then capital case without space)
// singular form or plural form depends on the object. If multiple objects, then plural

model User {
  id             String         @id @default(uuid())
  name           String         @db.VarChar(255)
  email          String         @unique @db.VarChar(255)
  phoneNumber    String         @db.VarChar(255)
  password       String         @db.VarChar(255)
  role           Role           @default(CLIENT)
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  userLocations  UserLocation[]
  clientBookings Booking[]      @relation("ClientBookings")
  workerBookings Booking[]      @relation("WorkerBookings")

  // Locations[]  locations  @relation(fields: [userId], references: [id])
  // WorkerHours[] workerHours  # Worker's work hours (if user is a worker)
  // Leaves[]     leaves

  @@map("user")
}

model Location {
  id             String         @id @default(uuid())
  address        String         @db.Text
  bathroomNumber Int            @db.Integer
  deskNumber     Int            @db.Integer
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  userLocations  UserLocation[]
  booking        Booking?

  @@map("location")
}

model UserLocation {
  id         String   @id @default(uuid())
  userId     String
  locationId String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  user       User     @relation(fields: [userId], references: [id])
  location   Location @relation(fields: [locationId], references: [id])

  @@unique([userId, locationId])
  @@map("user_location")
}

model Booking {
  id                   String        @id @default(uuid())
  client_id            String        @unique
  worker_id            String?       @unique
  service_id           String        @unique
  location_id          String        @unique
  date_time            DateTime
  estimated_arrival    DateTime
  original_date_time   DateTime?
  original_location_id String?
  price                Decimal
  status               BookingStatus
  rating               Int?
  createdAt            DateTime      @default(now())
  updatedAt            DateTime      @updatedAt
  client               User          @relation("ClientBookings", fields: [client_id], references: [id])
  worker               User?         @relation("WorkerBookings", fields: [worker_id], references: [id])
  service              Service       @relation(fields: [service_id], references: [id])
  location             Location      @relation(fields: [location_id], references: [id])

  // WorkerHours[]  workerHours
  // BookingHistory[] bookingHistory

  @@map("booking")
}

model Service {
  id          String    @id @default(uuid())
  name        String    @unique @db.VarChar(255)
  description String    @db.Text
  basePrice   Decimal
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  bookings    Booking[]

  @@map("service")
}
