datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Role {
  CLIENT
  WORKER
  ADMIN
}

enum BookingStatus {
  PENDING
  ACCEPTED
  COMPLETED
  CANCELLED
  MODIFIED
}

enum LeaveType {
  SICK_LEAVE
  ANNUAL_LEAVE
  UNPAID_LEAVE
}

enum PaymentStatus {
  SUCCESSFUL
  PENDING
  REFUNDED
}

// Table name convention:
// 1. snake_case (using lower case, space is replaced by underscore)
// 2. singular form (user, not users)

model User {
  id           String   @id @default(uuid())
  name         String   @db.VarChar(255)
  email        String   @unique @db.VarChar(255)
  phone_number String   @db.VarChar(255)
  password     String   @db.VarChar(255)
  role         Role     @default(CLIENT)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  locations UserLocation[] // Connects User to many Locations (Many-to-Many)
  // Locations[]  locations  @relation(fields: [user_id], references: [id])
  // Bookings[]   workerBookings  # Worker bookings assigned to this user
  // WorkerHours[] workerHours  # Worker's work hours (if user is a worker)
  // Leaves[]     leaves

  @@map("user")
}

model Service {
  id          String   @id @default(uuid())
  name        String   @unique @db.VarChar(255)
  description String   @db.Text
  base_price  Decimal
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Bookings[]  bookings

  @@map("service")
}

model Location {
  id               String   @id @default(uuid())
  // user_id     String    @unique  # Foreign key to User (changed from INT)
  address          String   @db.Text
  number_bathrooms Int      @db.Integer
  number_desks     Int      @db.Integer
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  @@map("location")
}

model UserLocation {
  id          String   @id @default(uuid())
  user_id     String   @unique // Foreign key to User (user has many locations)
  location_id String   @unique // Foreign key to Location (location can be used by many users)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  User        User?    @relation(fields: [userId], references: [id])
  userId      String?

  // User      @relation(fields: [user_id], references: [id])
  // Location  @relation(fields: [location_id], references: [id])
  @@map("user_location")
}

model Booking {
  id                   String        @id @default(uuid())
  // client_id           String  @unique  # Foreign key to User (changed from INT)
  // worker_id           String  @unique  # Foreign key to User (changed from INT)
  // service_id          String  @unique  # Foreign key to Service (changed from INT)
  // location_id         String  @unique  # Foreign key to Location (changed from INT)
  date_time            DateTime
  estimated_arrival    DateTime
  original_date_time   DateTime?
  original_location_id String?
  price                Decimal
  status               BookingStatus
  rating               Int?
  createdAt            DateTime      @default(now())
  updatedAt            DateTime      @updatedAt

  // Client    @relation(fields: [client_id], references: [id])
  // Worker    @relation(fields: [worker_id], references: [id])
  // Service   @relation(fields: [service_id], references: [id])
  // Location  @relation(fields: [location_id], references: [id])
  // WorkerHours[]  workerHours
  // BookingHistory[] bookingHistory

  @@map("booking")
}

model WorkerHours {
  id         String   @id @default(uuid())
  // worker_id    String  @unique  # Foreign key to User (changed from INT)
  // booking_id  String  @unique  # Foreign key to Booking (changed from INT)
  start_time DateTime
  end_time   DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Worker   @relation(fields: [worker_id], references: [id])
  // Booking  @relation(fields: [booking_id], references: [id])

  @@map("worker_hours")
}

model Leave {
  id         String    @id @default(uuid())
  // worker_id    String  @unique  # Foreign key to User (changed from INT)
  type       LeaveType
  start_date DateTime
  end_date   DateTime
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  // Worker  @relation(fields: [worker_id], references: [id])

  @@map("leave")
}

model BookingHistory {
  id        String   @id @default(uuid())
  // booking_id      String  @unique  # Foreign key to Booking (changed from INT)
  timestamp DateTime
  // changed_by      Int      # Client ID

  @@map("booking_history")
}
